#! /usr/bin/env python
import argparse
import getpass
import mdcs
import json
import sys

import lxml.etree as etree
import hashlib
import xmltodict
from io import BytesIO
import codecs

#-------------------------------------------------------------------------------
# functions
#-------------------------------------------------------------------------------

# get command line input
def get_function_args():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        "-url",
        dest='host',
        type=str,
        required=True,
        help='URL of the curator',
        metavar='<url>')
    parser.add_argument(
        "-u",
        dest='user',
        type=str,
        help='[optional] MDCS username if different from localhost',
        metavar='<user>')
    parser.add_argument(
        "-cert",
        dest='cert',
        type=str,
        default=None,
        help='[optional] Certificate file\n\n',
        metavar='<cert>')
    parser.add_argument(
        '-curate', 
        action='store_true',
        dest='curate',
        help=
'''Upload XML record:
-tn <template name>
-x <XML file name>
-n <record name>

''')
    parser.add_argument(
        '-blob', 
        action='store_true',
        dest='blob',
        help=
'''Upload file
-f <file name>

''')
    parser.add_argument(
        '-explore', 
        action='store_true',
        dest='explore',
        help=
'''Search and download XML record
-tn <template name> [optional]
-n <XML record name> [optional]
-id <record id> [optional]
-delete [optional] This will delete the XML document.
-j [optional] Download record as JSON
-x [optional] Download record as XML

''')
    parser.add_argument(
        '-templates', 
        action='store_true',
        dest='templates',
        help=
'''Upload search and download templates
-all       List all Templates
-current   List Current Templates
-find      Find a Template:
           -n <template name or XSD file name>
-add       Upload a Template:
           -x <XSD file name>
           -n <template name>
           -v <version number>
           -depend <id,id,id> list of dependent template ids no spaces
-delete    Delete a Template:
           -id <ID of template to delete>
           -next <ID of template to be promoted to current> [optional]
-restore   Restore a deleted Template:
           -id <ID of template to restore>
           
''')
    parser.add_argument(
        '-types', 
        action='store_true',
        dest='types',
        help=
'''Upload search and download types
-all       List all Types
-current   List Current Types
-find      Find a Type:
           -n <type name or XSD file name>
-add       Upload a Type:
           -x <XSD file name>
           -n <type name>
           -v <version number>
           -depend <id,id,id> list of dependent type ids no spaces
-delete    Delete a Type:
           -id <ID of type to delete>
           -next <ID of type to be promoted to current> [optional]
-restore   Restore a deleted Type:
           -id <ID of type to restore>
           
''')
    parser.add_argument(
        '-smart-xsd', 
        action='store_true',
        dest='smart_xsd',
        help=
'''Attempt to automatically upload XSD with local dependencies
-tn <template name>
''')
    known_args, unknown_args = parser.parse_known_args()
    args = vars(known_args)
    
    # curate command line input
    if args['curate']:
        parser.add_argument(
            "-tn",
            dest='template_name',
            type=str,
            required=True)
        parser.add_argument(
            "-x",
            dest='xml_file',
            type=str,
            required=True,
            nargs='+')
        parser.add_argument(
            "-n",
            dest='record_name',
            default=None,
            type=str)
    
    # blob command line input
    if args['blob']:
        parser.add_argument(
            "-f" ,
            dest='file',
            type=str,
            required=True)
    
    # explore command line input
    if args['explore']:
        parser.add_argument(
            "-tn",
            dest='template_name',
            type=str,
            default=None)
        parser.add_argument(
            "-n" ,
            dest='record_name',
            type=str,
            default=None)
        parser.add_argument(
            "-id",
            dest='record_id',
            type=str,
            default=None)
        parser.add_argument(
            '-j', 
            action='store_true',
            dest='download_json')
        parser.add_argument(
            '-x', 
            action='store_true',
            dest='download_xml')
        parser.add_argument(
            '-delete', 
            action='store_true',
            dest='delete_record')
    
    # templates command line input
    if args['templates']:
        parser.add_argument(
            '-add', 
            action='store_true',
            dest='templates_add')
        parser.add_argument(
            '-all', 
            action='store_true',
            dest='templates_all')
        parser.add_argument(
            '-download', 
            action='store_true',
            dest='download_xsd')
        parser.add_argument(
            '-current', 
            action='store_true',
            dest='templates_current')
        parser.add_argument(
            '-find', 
            action='store_true',
            dest='templates_find')
        parser.add_argument(
            '-delete', 
            action='store_true',
            dest='templates_delete')
        parser.add_argument(
            '-restore', 
            action='store_true',
            dest='templates_restore')
        known_args, unknown_args = parser.parse_known_args()
        args = vars(known_args)
        
        if args['templates_add']:
            parser.add_argument(
                "-x",
                dest='xsd_file_name',
                type=str,
                required=True)
            parser.add_argument(
                "-n",
                dest='template_name',
                type=str,
                required=True)
            parser.add_argument(
                "-v",
                dest='version',
                type=str,
                default=None)
            parser.add_argument(
                "-depend",
                dest='dependencies',
                type=str,
                default=None)
        
        if args['templates_find']:
            parser.add_argument(
                "-n",
                dest='name',
                type=str,
                required=True)
        
        if args['templates_delete']:
            parser.add_argument(
                "-id",
                dest='id',
                type=str,
                required=True)
            parser.add_argument(
                "-next",
                dest='next',
                type=str,
                default=None)
    
        if args['templates_restore']:
            parser.add_argument(
                "-id",
                dest='id',
                type=str,
                required=True)
    
    # types command line input
    if args['types']:
        parser.add_argument(
            '-add', 
            action='store_true',
            dest='types_add')
        parser.add_argument(
            '-all', 
            action='store_true',
            dest='types_all')
        parser.add_argument(
            '-download', 
            action='store_true',
            dest='download_xsd')
        parser.add_argument(
            '-current', 
            action='store_true',
            dest='types_current')
        parser.add_argument(
            '-find', 
            action='store_true',
            dest='types_find')
        parser.add_argument(
            '-delete', 
            action='store_true',
            dest='types_delete')
        parser.add_argument(
            '-restore', 
            action='store_true',
            dest='types_restore')
        known_args, unknown_args = parser.parse_known_args()
        args = vars(known_args)
        
        if args['types_add']:
            parser.add_argument(
                "-x",
                dest='xsd_file_name',
                type=str,
                required=True)
            parser.add_argument(
                "-n",
                dest='type_name',
                type=str,
                required=True)
            parser.add_argument(
                "-v",
                dest='version',
                type=str,
                default=None)
            parser.add_argument(
                "-depend",
                dest='dependencies',
                type=str,
                default=None)
        
        if args['types_find']:
            parser.add_argument(
                "-n",
                dest='name',
                type=str,
                required=True)
        
        if args['types_delete']:
            parser.add_argument(
                "-id",
                dest='id',
                type=str,
                required=True)
            parser.add_argument(
                "-next",
                dest='next',
                type=str,
                default=None)
        
        if args['types_restore']:
            parser.add_argument(
                "-id",
                dest='id',
                type=str,
                required=True)
    
    # smart-xsd command line input
    if args['smart_xsd']:
        parser.add_argument(
            "-tn",
            dest='template_name',
            type=str,
            default=None)
    
    known_args, unknown_args = parser.parse_known_args()
    args = vars(known_args)
    
    # get username and password
    if args['user'] is None: args['user'] = getpass.getuser()
    args['pswd'] = getpass.getpass()
    
    return args

# write list of json results to disk
def write_json_records(records):
    for item in records:
        content_title=item['title']
        content_id=item['_id']
        content=item['content']
        content_root ,= content.keys()
        fname=content_title+"."+content_root+"."+content_id+".json"
        print "Saving file:",fname
        with codecs.open(fname, encoding='utf-8', mode='w+') as f:
            f.write("%s" % json.dumps(content,indent=4,separators=(',', ': ')))

# write list of xml results to disk
def write_xml_records(records):
    for item in records:
        content_title=item['title']
        content_id=item['_id']
        content=item['content']
        content_root = content.split('\n')[1].split('>')[0].replace('<','')
        fname=content_title+"."+content_root+"."+content_id+".xml"
        print "Saving file:",fname
        with codecs.open(fname, encoding='utf-8', mode='w+') as f:
            f.write(u'%s' % content)

# write list of xml results to disk
def print_xml_records(records):
    print len(records)," records were found in the repository."
    width = 25
    
    column = "{0:"+str(width)+"}|{1:"+str(width)+"}|{2:25}|{3:25}"
    print column.format("Title","Root Element","Record ID","Template ID")
    for r in records:
        title = r['title']
        if len(title) > width:
            title = title[0:(width-3)]+"..."
        print column.format(title,r['content'].keys()[0],r['_id'],r['schema'])

# write list of xsd results to disk
def write_xsd_records(records):
    for item in records:
        fname=item['filename']
        content=item['content']
        print "Saving file:",fname
        with codecs.open(fname, encoding='utf-8', mode='w+') as f:
            f.write(u'%s' % content)

# print list of xsd results to screen
def print_xsd_records(records):
    print len(records)," schemas were found in the repository."
    width = 55
    
    column = "{0:"+str(width)+"}|{1:"+str(width)+"}|{2:25}"
    print column.format("Title","Filename","Template ID")
    for r in records:
        title = r['title']
        if len(title) > width:
            title = title[0:(width-3)]+"..."
        filename = r['filename']
        if len(filename) > width:
            filename = filename[0:(width-3)]+"..."
        print column.format(title,filename,r['id'])

# curate rest actions
def curate(args):
    if len(args['xml_file'])==1:
        xml ,= args['xml_file']
        if args['record_name'] is None:
            args['record_name'] = xml.replace('.xml','')
        response = mdcs.curate_as(
            xml,
            args['record_name'],
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            template_title=args['template_name'])
        print "Successful upload of:",xml
        
    else:
        print "Performing automatic upload of multiple XML records"
        for xml in args['xml_file']:
            record_name = xml.replace('.xml','')
            response = mdcs.curate_as(
                xml,
                record_name,
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                template_title=args['template_name'])
            
            print "Successful upload of:",xml,"as",record_name

# blob rest actions
def blob(args):
    print mdcs.blob.upload(
        args['file'],
        args['host'],
        args['user'],
        args['pswd'],
        cert=args['cert'])

# explore rest actions
def explore(args):
    if args['delete_record']:
        if any([args['template_name'],args['record_name'],args['download_json'],args['download_xml']]):
            print "Option -explore -delete can only be used with -id"
        elif not args['record_id']:
            print "You must specifyt an id with -id"
        else:
            response = mdcs.explore.delete(
                args['record_id'],
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'])
            print "Successful deletion of:", args['record_id']
    
    elif any([args['template_name'],args['record_name'],args['record_id']]):
        if not any([args['download_json'],args['download_xml']]):
            records = mdcs.explore.select(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                format='json',
                ID=args['record_id'],
                template=args['template_name'],
                title=args['record_name'])
            print_xml_records(records)
        
        if args['download_json']:
            records = mdcs.explore.select(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                format='json',
                ID=args['record_id'],
                template=args['template_name'],
                title=args['record_name'])
            write_json_records(records)
        
        if args['download_xml']:
            records = mdcs.explore.select(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                format='xml',
                ID=args['record_id'],
                template=args['template_name'],
                title=args['record_name'])
            write_xml_records(records)
    else:
        if not any([args['download_json'],args['download_xml']]):
            records = mdcs.explore.select_all(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                format='json')
            print_xml_records(records)
        
        if args['download_json']:
            records = mdcs.explore.select_all(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                format='json')
            write_json_records(records)
        
        if args['download_xml']:
            records = mdcs.explore.select_all(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                format='xml')
            write_xml_records(records)

# templates rest actions
def templates(args):
    if args['templates_add']:
        response = mdcs.templates.add(
            args['xsd_file_name'],
            args['template_name'],
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            version=args['version'],
            dependencies=args['dependencies'])
        print "Success:"
        print "title:",response['title']
        print "filename:",response['filename']
    
    elif args['templates_all']:
        templates = mdcs.templates.select_all(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'])
        if args['download_xsd']:
            write_xsd_records(templates)
        else:
            print_xsd_records(templates)
    
    elif args['templates_current']:
        templates = mdcs.templates.select_current(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'])
        if args['download_xsd']:
            write_xsd_records(templates)
        else:
            print_xsd_records(templates)
    
    elif args['templates_find']:
        template_id = mdcs.templates.current_id(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            filename=args['name'],
            title=args['name'])
        print "I found",template_id
    
    elif args['templates_delete']:
        response = mdcs.templates.delete(
            args['id'],
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            next=args['next'])
        print response
    
    elif args['templates_restore']:
        response = mdcs.templates.restore(
            args['id'],
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'])
        print response

# types rest actions
def types(args):
    if args['types_add']:
        response = mdcs.types.add(
            args['xsd_file_name'],
            args['type_name'],
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            version=args['version'],
            dependencies=args['dependencies'])
        print "Success:"
        print "title:",response['title']
        print "filename:",response['filename']
    
    elif args['types_all']:
        types = mdcs.types.select_all(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'])
        if args['download_xsd']:
            write_xsd_records(types)
        else:
            print_xsd_records(types)
    
    elif args['types_current']:
        types = mdcs.types.select_current(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'])
        if args['download_xsd']:
            write_xsd_records(types)
        else:
            print_xsd_records(types)
    
    elif args['types_find']:
        type_id = mdcs.types.current_id(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            filename=args['name'],
            title=args['name'])
        print "I found",type_id
    
    elif args['types_delete']:
        response = mdcs.types.delete(
            args['id'],
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            next=args['next'])
        print response
    
    elif args['types_restore']:
        response = mdcs.types.restore(
            args['id'],
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'])
        print response

# xsd smart uploader functions
def xsd_type_dependencies(xsd_name):
    xsd_type=None
    xsd_dependencies=list()
    
    with open(xsd_name, mode='r') as f:
        xsd_data = f.read()
    
    hash_parser = etree.XMLParser(remove_blank_text=True,remove_comments=True,remove_pis=True)
    etree.set_default_parser(parser=hash_parser)
    xmlTree = etree.parse(BytesIO(xsd_data.encode('utf-8')))
    cleanXmlString = etree.tostring(xmlTree)
    xmlDict = xmltodict.parse(cleanXmlString, dict_constructor=dict)
	
    root_content = xmlDict['xsd:schema'].keys()
    
    if "xsd:element" in root_content or "xs:element" in root_content:
        xsd_type = "template"
    else:
        xsd_type = "type"
    
    root = xmlTree.getroot()
    
    for child in root:
        if "include" in child.tag or "import" in child.tag:
            child_xsd = child.attrib['schemaLocation']
            xsd_dependencies.append(child_xsd)
    
    return xsd_type,xsd_dependencies

def recursive_upload_xsd(xsd_name):
    name = xsd_name.replace('.xsd','')
    xsd_id=None
    xsd_id_list=list()
    xsd_type,xsd_dependencies = xsd_type_dependencies(xsd_name)
    
    for xsd in xsd_dependencies:
        ref_xsd_id = recursive_upload_xsd(xsd)
        
        xsd_id_list.append(str(ref_xsd_id))
    
    dependencies = str(xsd_id_list)
    dependencies = dependencies.replace(" ","")
    dependencies = dependencies.replace("'","")
    dependencies = dependencies.replace("[","")
    dependencies = dependencies.replace("]","")
    
    if xsd_type is 'type':
        xsd_id = mdcs.types.current_id(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            title=name)
        if xsd_id is None:
            print "uploading",name,"as",xsd_type
            response = mdcs.types.add(
                xsd_name,
                name,
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                dependencies=dependencies)
            xsd_id = mdcs.types.current_id(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                title=name)
        else:
            print "found dependency",name,"as",xsd_id
            
    else:
        xsd_id = mdcs.templates.current_id(
            args['host'],
            args['user'],
            args['pswd'],
            cert=args['cert'],
            title=name)
        if xsd_id is None:
            print "uploading",name,"as",xsd_type
            response = mdcs.templates.add(
                xsd_name,
                name,
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                dependencies=dependencies)
            xsd_id = mdcs.templates.current_id(
                args['host'],
                args['user'],
                args['pswd'],
                cert=args['cert'],
                title=name)
        else:
            print "found Template",name,"as",xsd_id
    
    return xsd_id

# xsd smart uploader actions
def xsd_smart_upload(args):
    recursive_upload_xsd(args['template_name'])


#-------------------------------------------------------------------------------
# executable code
#-------------------------------------------------------------------------------
args = get_function_args()
if 'cert' in args and args['cert'] == 'False':
    args['cert'] = False
n = sum([
    args['curate'],
    args['blob'],
    args['explore'],
    args['templates'],
    args['types'],
    args['smart_xsd']])
if n!=1: sys.exit("Error: unknown operation type.")
if args['curate']:    curate(args)
if args['blob']:      blob(args)
if args['explore']:   explore(args)
if args['templates']: templates(args)
if args['types']:     types(args)
if args['smart_xsd']:  xsd_smart_upload(args)
